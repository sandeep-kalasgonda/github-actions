name: Node.js CI & Docker Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    # Use the 'git-test' self-hosted runner
    runs-on: [self-hosted, git-test]

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run build
      run: npm run build --if-present

    - name: Run tests
      run: npm test

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t sandeep3414/my-node-app:latest .

    - name: Push Docker image to Docker Hub
      run: |
        docker push sandeep3414/my-node-app:latest

    - name: Stop and remove existing container (if running)
      run: |
        EXISTING_CONTAINER=$(docker ps -q --filter "ancestor=sandeep3414/my-node-app:latest")
        if [ ! -z "$EXISTING_CONTAINER" ]; then
          echo "Stopping and removing existing container..."
          docker stop "$EXISTING_CONTAINER"
          docker rm "$EXISTING_CONTAINER"
        fi

        # Check if port 3000 is in use by any other process
        if ss -tuln | grep -q ":3000 "; then
          echo "Port 3000 is already in use. Freeing the port..."
          CONTAINER_ON_PORT=$(docker ps -q --filter "publish=3000")
          if [ ! -z "$CONTAINER_ON_PORT" ]; then
            echo "Stopping container using port 3000..."
            docker stop "$CONTAINER_ON_PORT"
            docker rm "$CONTAINER_ON_PORT"
          fi
        fi

    - name: Pull Docker image and run container
      run: |
        docker pull sandeep3414/my-node-app:latest
        docker run -d -p 3000:3000 --name my-node-app sandeep3414/my-node-app:latest
